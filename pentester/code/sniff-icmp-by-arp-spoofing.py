#!/usr/bin/python3
# coding: UTF-8

import argparse
import sys
import time

from multiprocessing import Process
from scapy.all import Ether, ARP, send, sniff, srp1


def enable_ip_forward():
    ip_forward_path = '/proc/sys/net/ipv4/ip_forward'
    with open(ip_forward_path, 'w') as f:
        # sudo sysctl net.ipv4.ip_forward=1相当の処理
        f.write('1')

# 偽のARP応答を送信し、ARPテーブルの書き換える    
def spoof(target_ip, destination_ip):
    # TODO: 書いてください!
    pass

#  正規のARP応答を送信するrestore関数が実行され、改ざんしたARPテーブルを修正
def restore(target_ip, destination_ip):
    # TODO: 書いてください!
    pass

# sniff関数の引数に指定するコールバック関数
def print_packet(packet):
    packet.show()

def sniff_icmp():
    sniff(filter='icmp', prn=print_packet)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Sniffing ICMP by ARP spoofing')
    parser.add_argument('target', help='Target IP Address')
    parser.add_argument('destination', help='Destination IP Address')

    args = parser.parse_args()
    target = args.target
    destination = args.destination
    enable_ip_forward()
    try:
        sniff_process = Process(target=sniff_icmp)
        sniff_process.start()
        print('Start sniffing...')
        print('Start ARP spoofing...')

        while True:
            spoof(target, destination)
            spoof(destination, target)
            time.sleep(2)
    except KeyboardInterrupt:
        print('Restoring the network...')
        restore(target, destination)
        restore(destination, target)
